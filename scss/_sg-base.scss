// Name
// This stops me from being overzealous with enforcing classes
$sg-name: "sg" !default;
$sg-column-name: "col" !default;

// $col-devisions are the column devisions you want
// For example, $col-devisions: (12, 16) will output:
// .col-[n]-12, .col-[n]-16
$col-devisions: (2, 3, 4, 6, 12) !default;

// Gutter width
$sg-gutter: 20px !default;

// Breakpoints
$sg-breakpoint-medium: 700px !default;
$sg-breakpoint-small: 480px !default;

// Pushes and pulls
$sg-pushes: true !default;
$sg-pulls: true !default;

$sg-center-headings: true !default;

.#{$sg-name} {
	list-style: none;
	margin-left: -$sg-gutter;
}

/* NOTE
html is set to 62.5% so that all the REM measurements throughout Skeleton
are based on 10px sizing. So basically 1.5rem = 15px :) */
html {
	font-size: 62.5%;
}
body {
	font-size: 1.5em;
	line-height: 1.6;
	font-weight: 400;
	font-family: "HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif;
	color: #222; 
}

%full                 { width: percentage(1/1); }

%one-half             { width: percentage(1/2); }

%one-third            { width: percentage(1/3); }
%two-thirds           { width: percentage(2/3); }

%one-quarter          { width: percentage(1/4); }
%two-quarters         { width: percentage(2/4); }
%three-quarters       { width: percentage(3/4); }

%push-full            { margin-left: percentage(1/1); }

%push-one-half        { margin-left: percentage(1/2); }

%push-one-third       { margin-left: percentage(1/3); }
%push-two-thirds      { margin-left: percentage(2/3); }

%push-one-quarter     { margin-left: percentage(1/4); }
%push-two-quarters    { margin-left: percentage(2/4); }
%push-three-quarters  { margin-left: percentage(3/4); }

%pull-full            { margin-left: -(percentage(1/1)); }

%pull-one-half        { margin-left: -(percentage(1/2)); }

%pull-one-third       { margin-left: -(percentage(1/3)); }
%pull-two-thirds      { margin-left: -(percentage(2/3)); }

%pull-one-quarter     { margin-left: -(percentage(1/4)); }
%pull-two-quarters    { margin-left: -(percentage(2/4)); }
%pull-three-quarters  { margin-left: -(percentage(3/4)); }

// For each of our column devisions...
@each $group in $col-devisions {

	 // For each column width from 1 to the column group...
	@for $i from 1 through $group {
		.#{$sg-column-name}-#{$i}-#{$group} {

			@if percentage($i/$group) == percentage(1/1) {
				@extend %full;

			} @else if percentage($i/$group) == percentage(1/2) {
				@extend %one-half;

			} @else if percentage($i/$group) == percentage(1/3) {
				@extend %one-third;

			} @else if percentage($i/$group) == percentage(2/3) {
				@extend %two-thirds;

			} @else if percentage($i/$group) == percentage(1/4) {
				@extend %one-quarter;

			} @else if percentage($i/$group) == percentage(2/4) {
				@extend %two-quarters;

			} @else if percentage($i/$group) == percentage(3/4) {
				@extend %three-quarters;

			} @else {

				width: percentage($i/$group);

			}
		}

		@if ($sg-pushes) {
			.#{$sg-column-name}-push-#{$i}-#{$group} {

				@if percentage($i/$group) == percentage(1/1) {
					@extend %push-full;

				} @else if percentage($i/$group) == percentage(1/2) {
					@extend %push-one-half;

				} @else if percentage($i/$group) == percentage(1/3) {
					@extend %push-one-third;

				} @else if percentage($i/$group) == percentage(2/3) {
					@extend %push-two-thirds;

				} @else if percentage($i/$group) == percentage(1/4) {
					@extend %push-one-quarter;

				} @else if percentage($i/$group) == percentage(2/4) {
					@extend %push-two-quarters;

				} @else if percentage($i/$group) == percentage(3/4) {
					@extend %push-three-quarters;

				} @else {

					margin-left: percentage($i/$group);

				}
			}
		} // end pushes

		@if ($sg-pulls) {
			.#{$sg-column-name}-pull-#{$i}-#{$group} {

				@if percentage($i/$group) == percentage(1/1) {
					@extend %pull-full;

				} @else if percentage($i/$group) == percentage(1/2) {
					@extend %pull-one-half;

				} @else if percentage($i/$group) == percentage(1/3) {
					@extend %pull-one-third;

				} @else if percentage($i/$group) == percentage(2/3) {
					@extend %pull-two-thirds;

				} @else if percentage($i/$group) == percentage(1/4) {
					@extend %pull-one-quarter;

				} @else if percentage($i/$group) == percentage(2/4) {
					@extend %pull-two-quarters;

				} @else if percentage($i/$group) == percentage(3/4) {
					@extend %pull-three-quarters;

				} @else {

					margin-left: -(percentage($i/$group));

				}
			}
		} // end pulls
	} // end @for
} // end @each


// All direct descendents of .sg get treated the same way.
// This might be overkill for some, but it's a time-saver for me.
.#{$sg-column-name} {
	box-sizing: border-box;
	display: inline-block;
	margin-right: -.25em;
	min-height: 1px;
	padding-left: $sg-gutter;
	vertical-align: top;

	@media (max-width: $sg-breakpoint-medium) {
		display: block;
		margin-left: 0;
		margin-right: 0;
		width: auto;
	}

	@media (max-width: $sg-breakpoint-medium) and (min-width: $sg-breakpoint-small) {
		&[class*="#{$sg-column-name}-m-"] {
			display: inline-block;
			margin-right: -.24em;
		}

		&.#{$sg-column-name}-md-1-2 {
			width: percentage(1/2);
		}

		&.#{$sg-column-name}-md-1-3 {
			width: percentage(1/3);
		}

		&.#{$sg-column-name}-md-2-3 {
			width: percentage(2/3);
		}

		&.#{$sg-column-name}-md-1-4 {
			width: percentage(1/4);
		}

		&.#{$sg-column-name}-md-2-4 {
			@extend .#{$sg-column-name}-md-1-2;
		}

		&.#{$sg-column-name}-md-3-4 {
			width: percentage(3/4);
		}
	}

	@media (max-width: $sg-breakpoint-small) {
		&[class*="#{$sg-column-name}-sm-"] {
			display: inline-block;
			margin-right: -.24em;
		}

		&.#{$sg-column-name}-sm-1-2 {
			width: percentage(1/2);
		}

		&.#{$sg-column-name}-sm-1-3 {
			width: percentage(1/3);
		}

		&.#{$sg-column-name}-sm-2-3 {
			width: percentage(2/3);
		}

		&.#{$sg-column-name}-sm-1-4 {
			width: percentage(1/4);
		}

		&.#{$sg-column-name}-sm-2-4 {
			@extend .#{$sg-column-name}-sm-1-2;
		}

		&.#{$sg-column-name}-sm-3-4 {
			width: percentage(3/4);
		}
	}
}

// Centers the column in the grid and clears the row of all other columns
.#{$sg-column-name}-centered {
	display: block;
	margin-left: auto;
	margin-right: auto;
}


// Displays the column as the first in its row
.#{$sg-column-name}-first {
	float: left;
}

// Displays the column as the last in its row
.#{$sg-column-name}-last {
	float: right;
}

// Removes gutters from the columns
.#{$sg-name}-xgutter {
	margin-left: 0;
	width: 100%;

	.#{$sg-column-name} {
		padding-left: 0;
	}

	.#{$sg-column-name}-1 {
		margin-left: 0;
		width: 100%;
	}
}

// Align column to the bottom.
.#{$sg-column-name}-bottom {
	vertical-align: bottom;
}

// Align column to the middle.
.#{$sg-column-name}-midle {
	vertical-align: middle;
}

